#!/usr/bin/env bash
<<<<<<< HEAD

# shellcheck disable=SC2199
# shellcheck source=/dev/null

# SPDX-License-Identifier: MIT
# Copyright (C) 2022 Utsav Balar

# Currently set tip to the current kernel directory
KERNEL_TOP=$(pwd)
KERNEL_CFG=arch/arm64/configs/vendor/xiaomi
OUT_DIR=$KERNEL_TOP/temp
export KERNEL_TOP
export KERNEL_CFG
export OUT_DIR

# Set compiler PATH
CLANG=~/evo/prebuilts/clang/host/linux-x86/clang-r530567/bin/
GCC64=~/evo/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/
GCC32=~/evo/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/
export PATH=$CLANG:$GCC64:$GCC32:$PATH
export ARCH=arm64
export CLANG_TRIPLE="aarch64-linux-gnu-"
export CROSS_COMPILE="aarch64-linux-android-"
export CROSS_COMPILE_ARM32="arm-linux-androideabi-"

BUILD="make O=$OUT_DIR \
CC=clang \
HOSTCC=gcc \
LD=ld.lld \
AS=llvm-as \
AR=llvm-ar \
NM=llvm-nm \
OBJCOPY=llvm-objcopy \
OBJDUMP=llvm-objdump \
STRIP=llvm-strip \
LLVM=1 \
LLVM_IAS=1 \
-j$(nproc --all)
"
export BUILD

cd "$KERNEL_TOP" || exit

# These values must be changed for forks!
KERNEL_DEFCONFIG_URL="https://github.com/PocoF3Releases/kernel_xiaomi_sm8250"
KERNEL_DEFCONFIG_HEAD=$(git -C ${KERNEL_CFG} rev-parse HEAD)

SOC="kona"
if [ -n  "$*" ]; then
  case "$1" in
    alioth)
      DEVICE=$1;
    ;;
    apollo)
      DEVICE=$1;
    ;;
    cas)
      DEVICE=$1;
    ;;
    cmi)
      DEVICE=$1;
    ;;
    dagu)
      DEVICE=$1;
    ;;
    elish)
      DEVICE=$1;
    ;;
    enuma)
      DEVICE=$1;
    ;;
    lmi)
      DEVICE=$1;
    ;;
    munch)
      DEVICE=$1;
    ;;
    umi)
      DEVICE=$1;
    ;;
    thyme)
      DEVICE=$1;
    ;;
    psyche)
      DEVICE=$1;
    ;;
  esac

  echo "================================================="
  echo "Your Environment:"
  echo "KERNEL_TOP  : ${KERNEL_TOP}"
  echo "KERNEL_CFG  : ${KERNEL_CFG}"
  echo "OUT_DIR  : ${OUT_DIR}"
  ret=$(rm -rf "${OUT_DIR}" 2>&1);
  ret=$(mkdir -p "${OUT_DIR}" 2>&1);
  if [ ! -d "${OUT_DIR}" ] ; then
    echo "Check your environment";
    echo "ERROR: ${ret}";
    exit 1;
  fi

  echo "================================================="
  echo "SOC -> ${SOC} :: Device -> $1"
  echo "Running scripts/kconfig/merge_config.sh ..."
  ret=$(ARCH=arm64 LLVM=1 scripts/kconfig/merge_config.sh \
    -O "${OUT_DIR}" \
    ${KERNEL_CFG}/../${SOC}-perf_defconfig \
    ${KERNEL_CFG}/sm8250-common.config \
  ${KERNEL_CFG}/"${DEVICE}".config);

  case "$ret" in
    *"error"*|*"ERROR"*|*"Exit"*) echo "ERROR: $ret"; exit 1;;
  esac
  echo "Building new defconfig ..."
  ret=$(${BUILD} savedefconfig 2>&1);
  case "$ret" in
    *"error"*|*"ERROR"*) echo "ERROR: $ret"; exit 1;;
  esac
  mv "$OUT_DIR"/defconfig ./arch/arm64/configs/"$1"_defconfig

read -r -d '' KERNEL_COMMIT_MESSAGE << EOM
ARM64: configs: ${DEVICE}: update auto-generated defconfig for ${DEVICE}

This update is generated automatically by using the update_defconfig script
HEAD of the project used to prepare this commit:
${KERNEL_DEFCONFIG_URL}/tree/${KERNEL_DEFCONFIG_HEAD}
EOM

else

read -r -d '' KERNEL_COMMIT_MESSAGE << EOM
ARM64: configs: xiaomi: update auto-generated defconfig for all devices

This update is generated automatically by using the update_defconfig script
HEAD of the project used to prepare this commit:
${KERNEL_DEFCONFIG_URL}/tree/${KERNEL_DEFCONFIG_HEAD}
EOM

  DEVICES="alioth apollo cas cmi dagu elish enuma lmi munch umi thyme psyche"

  for device in $DEVICES; do \

    case $device in
      alioth)
        DEVICE=$device;
      ;;
      apollo)
        DEVICE=$device;
      ;;
      cas)
        DEVICE=$device;
      ;;
      cmi)
        DEVICE=$device;
      ;;
      dagu)
        DEVICE=$device;
      ;;
      elish)
        DEVICE=$device;
      ;;
      enuma)
        DEVICE=$device;
      ;;
      lmi)
        DEVICE=$device;
      ;;
      munch)
        DEVICE=$device;
      ;;
      umi)
        DEVICE=$device;
      ;;
      thyme)
        DEVICE=$device;
      ;;
      psyche)
        DEVICE=$device;
      ;;
    esac

    echo "================================================="
    echo "Your Environment:"
    echo "KERNEL_TOP  : ${KERNEL_TOP}"
    echo "KERNEL_CFG  : ${KERNEL_CFG}"
    echo "OUT_DIR  : ${OUT_DIR}"
      ret=$(rm -rf "${OUT_DIR}" 2>&1);
      ret=$(mkdir -p "${OUT_DIR}" 2>&1);
      if [ ! -d "${OUT_DIR}" ] ; then
        echo "Check your environment";
        echo "ERROR: ${ret}";
        exit 1;
      fi

      echo "================================================="
      echo "SOC -> ${SOC} :: Device -> $device"
      echo "Running scripts/kconfig/merge_config.sh ..."
      ret=$(ARCH=arm64 LLVM=1 scripts/kconfig/merge_config.sh \
        -O "${OUT_DIR}" \
        ${KERNEL_CFG}/../${SOC}-perf_defconfig \
        ${KERNEL_CFG}/sm8250-common.config \
      ${KERNEL_CFG}/"${DEVICE}".config);

      case "$ret" in
        *"error"*|*"ERROR"*|*"Exit"*) echo "ERROR: $ret"; exit 1;;
      esac
      echo "Building new defconfig ..."
      ret=$(${BUILD} savedefconfig 2>&1);
      case "$ret" in
        *"error"*|*"ERROR"*) echo "ERROR: $ret"; exit 1;;
      esac
      mv "$OUT_DIR"/defconfig ./arch/arm64/configs/"$device"_defconfig
  done
=======
# shellcheck source=/dev/null

# SPDX-License-Identifier: MIT
# Copyright (C) 2022-2024 Utsav Balar

# Currently set tip to the current kernel directory
declare -r krnl_top=$(pwd)
declare -r krnl_config_dir="arch/arm64/configs/vendor/xiaomi"
declare -g use_llvm=0
export krnl_top
export krnl_config_dir

# Set compiler PATH
if [[ -d $HOME/clang/bin ]]; then
	PATH=$HOME/clang/bin:$PATH
	use_llvm=1
	echo "Using Clang from $HOME/clang/bin"
elif command -v clang >/dev/null 2>&1; then
	use_llvm=1
	echo "Using Clang from $(command -v clang)"
fi

declare -r base_build_cmd="make ARCH=arm64 ${use_llvm:+LLVM=1 CLANG_TRIPLE=aarch64-linux-gnu-} CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc --all)"
export base_build_cmd

cd "$krnl_top" || exit

# These values must be changed for forks!
declare -r krnl_defconfig_url="https://github.com/liyafe1997/kernel_xiaomi_sm8250_immens1ty_mod"
declare -r krnl_defconfig_head=$(git -C "${krnl_config_dir}" rev-parse HEAD)

declare -r soc="kona"

declare -A devices=(
	[alioth]=1 [apollo]=1 [cas]=1 [cmi]=1 [dagu]=1 [elish]=1
	[enuma]=1 [lmi]=1 [munch]=1 [umi]=1 [thyme]=1 [pipa]=1 [psyche]=1
)

print_environment() {
	local device=$1
	local out_dir=$2
	echo "================================================="
	echo "Your Environment:"
	echo "Kernel Top  : ${krnl_top}"
	echo "Config Dir  : ${krnl_config_dir}"
	echo "Output Dir  : ${out_dir}"
	rm -rf "${out_dir}"
	mkdir -p "${out_dir}"
	if [[ ! -d "${out_dir}" ]]; then
		echo "Check your environment"
		echo "ERROR: Could not create output directory ${out_dir}"
		exit 1
	fi
	echo "================================================="
	echo "SOC -> ${soc} :: Device -> ${device}"
}

run_merge_config() {
	local device=$1
	local out_dir=$2
	echo "Running scripts/kconfig/merge_config.sh for ${device}..."
	ret=$(ARCH=arm64 LLVM=$use_llvm scripts/kconfig/merge_config.sh \
		-O "${out_dir}" \
		"${krnl_config_dir}/../${soc}-perf_defconfig" \
		"${krnl_config_dir}/xiaomi-${soc}-common.config" \
		"${krnl_config_dir}/${soc}-custom.config" \
		"${krnl_config_dir}/${device}.config")

	case "$ret" in
	*"error"* | *"ERROR"* | *"Exit"*)
		echo "ERROR: $ret"
		exit 1
		;;
	esac
}

build_defconfig() {
	local device=$1
	local out_dir=$2
	echo "Building new defconfig for ${device}..."
	ret=$(${base_build_cmd} O="${out_dir}" savedefconfig 2>&1)
	case "$ret" in
	*"error"* | *"ERROR"*)
		echo "ERROR: $ret"
		exit 1
		;;
	esac
	mv "${out_dir}/defconfig" "./arch/arm64/configs/${device}_defconfig"
}

process_device() {
	local device=$1
	local out_dir="${krnl_top}/temp_${device}"
	print_environment "$device" "$out_dir"
	run_merge_config "$device" "$out_dir"
	build_defconfig "$device" "$out_dir"
	rm -rf "$out_dir"
}

if [[ -n $1 ]]; then
	if [[ ${devices[$1]} ]]; then
		DEVICE=$1
		process_device "$DEVICE"

		krnl_commit_msg=$(
			cat <<EOM
ARM64: configs: ${DEVICE}: update auto-generated defconfig for ${DEVICE}
This update is generated automatically by using the update_defconfig script
HEAD of the project used to prepare this commit:
${krnl_defconfig_url}/tree/${krnl_defconfig_head}
EOM
		)
	fi
else
	krnl_commit_msg=$(
		cat <<EOM
ARM64: configs: xiaomi: update auto-generated defconfig for all devices
This update is generated automatically by using the update_defconfig script
HEAD of the project used to prepare this commit:
${krnl_defconfig_url}/tree/${krnl_defconfig_head}
EOM
	)

	# Run concurrently
	pids=()
	for device in "${!devices[@]}"; do
		process_device "$device" &
		pids+=($!)
	done

	for pid in "${pids[@]}"; do
		wait "$pid"
	done
>>>>>>> 7fc44a779600 (Add scripts)
fi

echo "================================================="
echo "Done!"
<<<<<<< HEAD
rm -rf "$OUT_DIR"

echo "You can now commit the updated defconfig with the following as the commit message:"
echo "${KERNEL_COMMIT_MESSAGE}"

unset KERNEL_TOP
unset KERNEL_CFG
unset OUT_DIR
unset BUILD
=======

echo "You can now commit the updated defconfig with the following as the commit message:"
echo "${krnl_commit_msg}"
>>>>>>> 7fc44a779600 (Add scripts)
