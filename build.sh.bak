#!/bin/bash

<<<<<<< HEAD
source ../settings.sh

#
#   settings.sh (example)
#
# export VERSION="1.x.x"
# export BUILD=1
# export PREFIX="e"
# export DESC="description"
# export DEVICE="alioth"
# export TGTOKEN=bot_id
# export LAST=last commit hash for generation changelog
# export TYPE="test or early"
# export LEVEL=1
# export EXTRA=""
#

START=$(date +%s)

rm -rf out

MAIN=/home/timisong

KERNEL=$PWD

CLANG=$MAIN/clang
GCC_ARM=$MAIN/arm-linux-androideabi-4.9
GCC_AARCH64=$MAIN/aarch64-linux-android-4.9

check_and_clone() {
    local dir=$1
    local repo=$2
    local name=$3

    if [ ! -d $dir ]; then
        echo Папка $dir не существует. Клонирование $repo
        cd $MAIN
        git clone $repo $name
    fi
}

check_and_wget() {
    local dir=$1
    local repo=$2

    if [ ! -d $dir ]; then
        echo Папка $dir не существует. Клонирование $repo
        mkdir $dir
        cd $dir
        wget -O clang.tar.gz $repo
        tar -zxvf clang.tar.gz
        rm -rf clang.tar.gz
        cd ../kernel_xiaomi_sm8250
    fi
}

build() {
    git log $LAST..HEAD > ../changelog.txt
    BRANCH=$(git branch --show-current)

    MAGICTIME=$MAIN/MagicTime-$DEVICE

    if [ ! -d $MAGICTIME ]; then
        mkdir -p $MAGICTIME

        if [ ! -d $MAGICTIME/Anykernel ]; then
            git clone https://github.com/TIMISONG-dev/Anykernel.git \
                $MAGICTIME/Anykernel

            mv $MAGICTIME/Anykernel/* $MAGICTIME/

            rm -rf $MAGICTIME/Anykernel
        fi
    else
        if [ -d $MAGICTIME/.git ]; then
            rm -rf $MAGICTIME/.git
        fi
    fi

    if [ $DEVICE = pipa ]; then
        IMG=$MAGICTIME/kernels/Image
        DTB=$MAGICTIME/kernels/dtb
        DTBO=$MAGICTIME/kernels/dtbo.img
    else
        IMG=$MAGICTIME/Image
        DTB=$MAGICTIME/dtb
        DTBO=$MAGICTIME/dtbo.img
    fi

    make O="$OUT" \
            ${DEVICE}_defconfig \
            vendor/xiaomi/magictime-common.config

    # Компиляция ядра
    make -j $(nproc) \
                O="$OUT" \
                CC="ccache clang" \
                HOSTCC=gcc \
                LD=ld.lld \
                AS=llvm-as \
                AR=llvm-ar \
                NM=llvm-nm \
                OBJCOPY=llvm-objcopy \
                OBJDUMP=llvm-objdump \
                STRIP=llvm-strip \
                LLVM=1 \
                LLVM_IAS=1 \
                V=$VERBOSE 2>&1 | tee build.log

find $DTS -name '*.dtb' -exec cat {} + > $DTB
find $DTS -name 'Image' -exec cat {} + > $IMG
find $DTS -name 'dtbo.img' -exec cat {} + > $DTBO

END=$(date +%s)
ELAPSED=$((END - START))

if grep -q -E "Ошибка 2|Error 2" build.log; then
    echo Ошибка: Сборка завершилась с ошибкой

    curl -s -X POST https://api.telegram.org/bot$TGTOKEN/sendMessage \
    -d chat_id=@magictimekernel \
    -d text="Ошибка в компиляции!" \
    -d message_thread_id=38153

    curl -s -X POST https://api.telegram.org/bot$TGTOKEN/sendDocument?chat_id=@magictimekernel \
    -F document=@./build.log \
    -F message_thread_id=38153

    curl -s -X POST https://api.telegram.org/bot$TGTOKEN/sendDocument?chat_id=@magictimekernel \
    -F document=@../changelog.txt \
    -F message_thread_id=38153
else
    echo Общее время выполнения: $ELAPSED секунд

    cd $MAGICTIME
    7z a -mx9 MagicTime-$DEVICE-$BUILD_DATE.zip * -x!*.zip
    
    curl -s -X POST https://api.telegram.org/bot$TGTOKEN/sendMessage \
    -d chat_id=@magictimekernel \
    -d text="Компиляция завершилась успешно! Время выполнения: $ELAPSED секунд" \
    -d message_thread_id=38153

    curl -s -X POST https://api.telegram.org/bot$TGTOKEN/sendDocument?chat_id=@magictimekernel \
    -F document=@./MagicTime-$DEVICE-$BUILD_DATE.zip \
    -F caption="MagicTime ${VERSION}${PREFIX}${BUILD} (${DESC}) branch: ${BRANCH}" \
    -F message_thread_id=38153
    
    curl -s -X POST https://api.telegram.org/bot$TGTOKEN/sendDocument?chat_id=@magictimekernel \
    -F document=@../changelog.txt \
    -F caption="Latest changes" \
    -F message_thread_id=38153

    rm -rf MagicTime-$DEVICE-$BUILD_DATE.zip

    BUILD=$((BUILD + 1))

    cd $KERNEL
    LAST=$(git log -1 --format=%H)

    sed -i "s/LAST=.*/LAST=$LAST/" ../settings.sh
    sed -i "s/BUILD=.*/BUILD=$BUILD/" ../settings.sh
fi
}

check_and_wget $CLANG \
    https://github.com/ZyCromerZ/Clang/releases/download/22.0.0git-20250805-release/Clang-22.0.0git-20250805.tar.gz
check_and_clone $GCC_ARM \
    https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 \
        arm-linux-androideabi-4.9
check_and_clone $GCC_AARCH64 \
    https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 \
        aarch64-linux-android-4.9

export PATH=$CLANG/bin:$GCC_AARCH64/bin:$GCC_ARM/bin:$PATH
export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-
export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
export KBUILD_BUILD_USER=TIMISONG
export KBUILD_BUILD_HOST=timisong-dev

BUILD_DATE=$(date '+%Y-%m-%d_%H-%M-%S')

OUT=out

if [ $LEVEL = 1 ] && [ $TYPE = test ]; then
    DEVICE="alioth"
    DESC="POCO F3 build"
    build
    LEVEL=$((LEVEL + 1))
    sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
    clear
fi

if [ $LEVEL = 1 ] && [ $TYPE = early ]; then
    build
    clear
fi

if [ $TYPE = test ]; then
    if [ $LEVEL = 2 ]; then
        DEVICE="pipa"
        DESC="Mi Pad 6 AOSP build"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
    fi

    if [ $LEVEL = 3 ]; then
        DEVICE="alioth"
        git cherry-pick 6180281005f4a2ce7ea4895d1e35be47f99b3e11
        DESC="POCO F3 build 5k battery"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
        git reset --hard HEAD~1
    fi

    if [ $LEVEL = 4 ]; then
        git revert 48d6466f502f0ed1ecafbad71aac79ec64f60cd8 --no-edit
        git revert 525dbd2c5c97546c1305a245f0c613d9a4f39519 --no-edit
        git revert a3f0009c637419795baf4195c4b236aa4c23a00a --no-edit
        DESC="POCO F3 build without susfs"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
    fi

    if [ $LEVEL = 5 ]; then
        if [ $EXTRA = "!4"]; then
            git revert 48d6466f502f0ed1ecafbad71aac79ec64f60cd8 --no-edit
            git revert 525dbd2c5c97546c1305a245f0c613d9a4f39519 --no-edit
            git revert a3f0009c637419795baf4195c4b236aa4c23a00a --no-edit
        fi
        DEVICE="pipa"
        DESC="Mi Pad 6 AOSP build without susfs"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
    fi

    if [ $LEVEL = 6 ]; then
        if [ $EXTRA = "!4"]; then
            git revert 48d6466f502f0ed1ecafbad71aac79ec64f60cd8 --no-edit
            git revert 525dbd2c5c97546c1305a245f0c613d9a4f39519 --no-edit
            git revert a3f0009c637419795baf4195c4b236aa4c23a00a --no-edit
        fi
        DEVICE="alioth"
        git cherry-pick 6180281005f4a2ce7ea4895d1e35be47f99b3e11
        DESC="POCO F3 build 5k battery without susfs"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear

        git reset --hard HEAD~4
        clear
    fi

    # MIUI

    git checkout magictime-miui

    if [ $LEVEL = 7 ]; then
        DESC="POCO F3 MIUI build"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
    fi

    if [ $LEVEL = 8 ]; then
        DEVICE="pipa"
        DESC="Mi Pad 6 MIUI build"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
    fi

    if [ $LEVEL = 9 ]; then
        DEVICE="alioth"
        git cherry-pick 6180281005f4a2ce7ea4895d1e35be47f99b3e11
        DESC="POCO F3 MIUI build 5k battery"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
        git reset --hard HEAD~1
    fi

    if [ $LEVEL = 10 ]; then
        git revert 48d6466f502f0ed1ecafbad71aac79ec64f60cd8 --no-edit
        git revert 525dbd2c5c97546c1305a245f0c613d9a4f39519 --no-edit
        git revert a3f0009c637419795baf4195c4b236aa4c23a00a --no-edit
        DESC="POCO F3 MIUI build without susfs"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
    fi

    if [ $LEVEL = 11 ]; then
        if [ $EXTRA = "!10" ]; then
            git revert 48d6466f502f0ed1ecafbad71aac79ec64f60cd8 --no-edit
            git revert 525dbd2c5c97546c1305a245f0c613d9a4f39519 --no-edit
            git revert a3f0009c637419795baf4195c4b236aa4c23a00a --no-edit
        fi
        DEVICE="pipa"
        DESC="Mi Pad 6 MIUI build without susfs"
        build
        LEVEL=$((LEVEL + 1))
        sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
        clear
    fi

    if [ $LEVEL = 12 ]; then
        if [ $EXTRA = "!10" ]; then
            git revert 48d6466f502f0ed1ecafbad71aac79ec64f60cd8 --no-edit
            git revert 525dbd2c5c97546c1305a245f0c613d9a4f39519 --no-edit
            git revert a3f0009c637419795baf4195c4b236aa4c23a00a --no-edit
        fi
        DEVICE="alioth"
        git cherry-pick 6180281005f4a2ce7ea4895d1e35be47f99b3e11
        DESC="POCO F3 MIUI build 5k battery without susfs"
        build

        git reset --hard HEAD~4
        clear
    fi

    LEVEL=1
    EXTRA=""
    sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" ../settings.sh
    sed -i "s/EXTRA=.*/EXTRA=$EXTRA/" ../settings.sh
    git checkout magictime-new
    clear
fi
=======
# Some logics of this script are copied from [scripts/build_kernel]. Thanks to UtsavBalar1231.

# Ensure the script exits on error
set -e

TOOLCHAIN_PATH=$HOME/proton-clang/proton-clang-20210522/bin

TARGET_DEVICE=$1

if [ -z "$1" ]; then
    echo "Error: No argument provided, please specific a target device." 
    echo "If you need KernelSU, please add [ksu] as the second arg."
    echo "Examples:"
    echo "Build for lmi(K30 Pro/POCO F2 Pro) without KernelSU:"
    echo "    bash build.sh lmi"
    echo "Build for umi(Mi10) with KernelSU:"
    echo "    bash build.sh umi ksu"
    exit 1
fi



if [ ! -d $TOOLCHAIN_PATH ]; then
    echo "TOOLCHAIN_PATH [$TOOLCHAIN_PATH] does not exist."
    echo "Please ensure the toolchain is there, or change TOOLCHAIN_PATH in the script to your toolchain path."
    exit 1
fi

echo "TOOLCHAIN_PATH: [$TOOLCHAIN_PATH]"
export PATH="$TOOLCHAIN_PATH:$PATH"

if ! command -v aarch64-linux-gnu-ld >/dev/null 2>&1; then
    echo "[aarch64-linux-gnu-ld] does not exist, please check your environment."
    exit 1
fi

if ! command -v arm-linux-gnueabi-ld >/dev/null 2>&1; then
    echo "[arm-linux-gnueabi-ld] does not exist, please check your environment."
    exit 1
fi

if ! command -v clang >/dev/null 2>&1; then
    echo "[clang] does not exist, please check your environment."
    exit 1
fi


# Enable ccache for speed up compiling 
export CCACHE_DIR="$HOME/.cache/ccache_mikernel" 
export CC="ccache gcc"
export CXX="ccache g++"
export PATH="/usr/lib/ccache:$PATH"
echo "CCACHE_DIR: [$CCACHE_DIR]"

if [ ! -f "arch/arm64/configs/${TARGET_DEVICE}_defconfig" ]; then
    echo "No target device [${TARGET_DEVICE}] found."
    echo "Avaliable defconfigs, please choose one target from below down:"
    ls arch/arm64/configs/*_defconfig
    exit 1
fi


# Check clang is existing.
echo "[clang --version]:"
clang --version



KSU_ZIP_STR=NoKernelSU
if [ "$2" == "ksu" ]; then
    KSU_ENABLE=1
    KSU_ZIP_STR=KernelSU
else
    KSU_ENABLE=0
fi


echo "TARGET_DEVICE: $TARGET_DEVICE"

if [ $KSU_ENABLE -eq 1 ]; then
    echo "KSU is enabled"
    curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
else
    echo "KSU is disabled"
fi


MAKE_ARGS="ARCH=arm64 SUBARCH=arm64 O=out CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- CLANG_TRIPLE=aarch64-linux-gnu-"


echo "Cleaning..."

rm -rf out/
rm -rf anykernel/

echo "Clone AnyKernel3 for packing kernel (repo: https://github.com/liyafe1997/AnyKernel3)"
git clone https://github.com/liyafe1997/AnyKernel3 -b kona --single-branch --depth=1 anykernel

# ------------- Building for AOSP -------------

echo "Building for AOSP......"
make $MAKE_ARGS ${TARGET_DEVICE}_defconfig

if [ $KSU_ENABLE -eq 1 ]; then
    scripts/config --file out/.config -e KSU
else
    scripts/config --file out/.config -d KSU
fi

make $MAKE_ARGS -j$(nproc)


if [ -f "out/arch/arm64/boot/Image" ]; then
    echo "The file [out/arch/arm64/boot/Image] exists. AOSP Build successfully."
else
    echo "The file [out/arch/arm64/boot/Image] does not exist. Seems AOSP build failed."
    exit 1
fi

echo "Generating [out/arch/arm64/boot/dtb]......"
find out/arch/arm64/boot/dts -name '*.dtb' -exec cat {} + >out/arch/arm64/boot/dtb

rm -rf anykernel/kernels/

mkdir -p anykernel/kernels/

cp out/arch/arm64/boot/Image anykernel/kernels/
cp out/arch/arm64/boot/dtb anykernel/kernels/

cd anykernel 

ZIP_FILENAME=Kernel_AOSP_${TARGET_DEVICE}_${KSU_ZIP_STR}_$(date +'%Y%m%d_%H%M%S')_anykernel3.zip

zip -r9 $ZIP_FILENAME ./* -x .git .gitignore out/ ./*.zip

mv $ZIP_FILENAME ../

cd ..


echo "Build for AOSP finished."

# ------------- End of Building for AOSP -------------
#  If you don't need AOSP you can comment out the above block [Building for AOSP]


# ------------- Building for MIUI -------------


echo "Clearning [out/] and build for MIUI....."
rm -rf out/

dts_source=arch/arm64/boot/dts/vendor/qcom

# Backup dts
cp -a ${dts_source} .dts.bak

# Correct panel dimensions on MIUI builds
sed -i 's/<154>/<1537>/g' ${dts_source}/dsi-panel-j1s*
sed -i 's/<154>/<1537>/g' ${dts_source}/dsi-panel-j2*
sed -i 's/<155>/<1544>/g' ${dts_source}/dsi-panel-j3s-37-02-0a-dsc-video.dtsi
sed -i 's/<155>/<1545>/g' ${dts_source}/dsi-panel-j11-38-08-0a-fhd-cmd.dtsi
sed -i 's/<155>/<1546>/g' ${dts_source}/dsi-panel-k11a-38-08-0a-dsc-cmd.dtsi
sed -i 's/<155>/<1546>/g' ${dts_source}/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
sed -i 's/<70>/<695>/g' ${dts_source}/dsi-panel-j11-38-08-0a-fhd-cmd.dtsi
sed -i 's/<70>/<695>/g' ${dts_source}/dsi-panel-j3s-37-02-0a-dsc-video.dtsi
sed -i 's/<70>/<695>/g' ${dts_source}/dsi-panel-k11a-38-08-0a-dsc-cmd.dtsi
sed -i 's/<70>/<695>/g' ${dts_source}/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
sed -i 's/<71>/<710>/g' ${dts_source}/dsi-panel-j1s*
sed -i 's/<71>/<710>/g' ${dts_source}/dsi-panel-j2*

# Enable back mi smartfps while disabling qsync min refresh-rate
sed -i 's/\/\/ mi,mdss-dsi-pan-enable-smart-fps/mi,mdss-dsi-pan-enable-smart-fps/g' ${dts_source}/dsi-panel*
sed -i 's/\/\/ mi,mdss-dsi-smart-fps-max_framerate/mi,mdss-dsi-smart-fps-max_framerate/g' ${dts_source}/dsi-panel*
sed -i 's/\/\/ qcom,mdss-dsi-pan-enable-smart-fps/qcom,mdss-dsi-pan-enable-smart-fps/g' ${dts_source}/dsi-panel*
sed -i 's/qcom,mdss-dsi-qsync-min-refresh-rate/\/\/qcom,mdss-dsi-qsync-min-refresh-rate/g' ${dts_source}/dsi-panel*

# Enable back refresh rates supported on MIUI
sed -i 's/120 90 60/120 90 60 50 30/g' ${dts_source}/dsi-panel-g7a-36-02-0c-dsc-video.dtsi
sed -i 's/120 90 60/120 90 60 50 30/g' ${dts_source}/dsi-panel-g7a-37-02-0a-dsc-video.dtsi
sed -i 's/120 90 60/120 90 60 50 30/g' ${dts_source}/dsi-panel-g7a-37-02-0b-dsc-video.dtsi
sed -i 's/144 120 90 60/144 120 90 60 50 48 30/g' ${dts_source}/dsi-panel-j3s-37-02-0a-dsc-video.dtsi


# Enable back brightness control from dtsi
sed -i 's/\/\/39 00 00 00 00 00 03 51 03 FF/39 00 00 00 00 00 03 51 03 FF/g' ${dts_source}/dsi-panel-j9-38-0a-0a-fhd-video.dtsi
sed -i 's/\/\/39 00 00 00 00 00 03 51 0D FF/39 00 00 00 00 00 03 51 0D FF/g' ${dts_source}/dsi-panel-j2-p2-1-38-0c-0a-dsc-cmd.dtsi
sed -i 's/\/\/39 00 00 00 00 00 05 51 0F 8F 00 00/39 00 00 00 00 00 05 51 0F 8F 00 00/g' ${dts_source}/dsi-panel-j1s-42-02-0a-dsc-cmd.dtsi
sed -i 's/\/\/39 00 00 00 00 00 05 51 0F 8F 00 00/39 00 00 00 00 00 05 51 0F 8F 00 00/g' ${dts_source}/dsi-panel-j1s-42-02-0a-mp-dsc-cmd.dtsi
sed -i 's/\/\/39 00 00 00 00 00 05 51 0F 8F 00 00/39 00 00 00 00 00 05 51 0F 8F 00 00/g' ${dts_source}/dsi-panel-j2-mp-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 00 00 00 00 00 05 51 0F 8F 00 00/39 00 00 00 00 00 05 51 0F 8F 00 00/g' ${dts_source}/dsi-panel-j2-p2-1-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 00 00 00 00 00 05 51 0F 8F 00 00/39 00 00 00 00 00 05 51 0F 8F 00 00/g' ${dts_source}/dsi-panel-j2s-mp-42-02-0a-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 00 00/39 01 00 00 00 00 03 51 00 00/g' ${dts_source}/dsi-panel-j2-38-0c-0a-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 00 00/39 01 00 00 00 00 03 51 00 00/g' ${dts_source}/dsi-panel-j2-38-0c-0a-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 03 FF/39 01 00 00 00 00 03 51 03 FF/g' ${dts_source}/dsi-panel-j11-38-08-0a-fhd-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 03 FF/39 01 00 00 00 00 03 51 03 FF/g' ${dts_source}/dsi-panel-j9-38-0a-0a-fhd-video.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 07 FF/39 01 00 00 00 00 03 51 07 FF/g' ${dts_source}/dsi-panel-j1u-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 07 FF/39 01 00 00 00 00 03 51 07 FF/g' ${dts_source}/dsi-panel-j2-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 07 FF/39 01 00 00 00 00 03 51 07 FF/g' ${dts_source}/dsi-panel-j2-p1-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 0F FF/39 01 00 00 00 00 03 51 0F FF/g' ${dts_source}/dsi-panel-j1u-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 0F FF/39 01 00 00 00 00 03 51 0F FF/g' ${dts_source}/dsi-panel-j2-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 03 51 0F FF/39 01 00 00 00 00 03 51 0F FF/g' ${dts_source}/dsi-panel-j2-p1-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 05 51 07 FF 00 00/39 01 00 00 00 00 05 51 07 FF 00 00/g' ${dts_source}/dsi-panel-j1s-42-02-0a-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 05 51 07 FF 00 00/39 01 00 00 00 00 05 51 07 FF 00 00/g' ${dts_source}/dsi-panel-j1s-42-02-0a-mp-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 05 51 07 FF 00 00/39 01 00 00 00 00 05 51 07 FF 00 00/g' ${dts_source}/dsi-panel-j2-mp-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 05 51 07 FF 00 00/39 01 00 00 00 00 05 51 07 FF 00 00/g' ${dts_source}/dsi-panel-j2-p2-1-42-02-0b-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 00 00 05 51 07 FF 00 00/39 01 00 00 00 00 05 51 07 FF 00 00/g' ${dts_source}/dsi-panel-j2s-mp-42-02-0a-dsc-cmd.dtsi
sed -i 's/\/\/39 01 00 00 01 00 03 51 03 FF/39 01 00 00 01 00 03 51 03 FF/g' ${dts_source}/dsi-panel-j11-38-08-0a-fhd-cmd.dtsi
sed -i 's/\/\/39 01 00 00 11 00 03 51 03 FF/39 01 00 00 11 00 03 51 03 FF/g' ${dts_source}/dsi-panel-j2-p2-1-38-0c-0a-dsc-cmd.dtsi


make $MAKE_ARGS ${TARGET_DEVICE}_defconfig

if [ $KSU_ENABLE -eq 1 ]; then
    scripts/config --file out/.config -e KSU
else
    scripts/config --file out/.config -d KSU
fi


scripts/config --file out/.config \
    --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd \
    -e PERF_CRITICAL_RT_TASK	\
    -e SF_BINDER		\
    -e OVERLAY_FS		\
    -d DEBUG_FS \
    -e MIGT \
    -e MIGT_ENERGY_MODEL \
    -e MIHW \
    -e PACKAGE_RUNTIME_INFO \
    -e BINDER_OPT \
    -e KPERFEVENTS \
    -e MILLET \
    -e PERF_HUMANTASK \
    -d LTO_CLANG \
    -d LOCALVERSION_AUTO \
    -e SF_BINDER \
    -e XIAOMI_MIUI \
    -d MI_MEMORY_SYSFS \
    -e TASK_DELAY_ACCT \
    -e MIUI_ZRAM_MEMORY_TRACKING \
    -d CONFIG_MODULE_SIG_SHA512 \
    -d CONFIG_MODULE_SIG_HASH \
    -e MI_FRAGMENTION \

make $MAKE_ARGS -j$(nproc)



if [ -f "out/arch/arm64/boot/Image" ]; then
    echo "The file [out/arch/arm64/boot/Image] exists. MIUI Build successfully."
else
    echo "The file [out/arch/arm64/boot/Image] does not exist. Seems MIUI build failed."
    exit 1
fi

echo "Generating [out/arch/arm64/boot/dtb]......"
find out/arch/arm64/boot/dts -name '*.dtb' -exec cat {} + >out/arch/arm64/boot/dtb


# Restore modified dts
rm -rf ${dts_source}
mv .dts.bak ${dts_source}

rm -rf anykernel/kernels/
mkdir -p anykernel/kernels/

cp out/arch/arm64/boot/Image anykernel/kernels/
cp out/arch/arm64/boot/dtb anykernel/kernels/

echo "Build for MIUI finished."
# ------------- End of Building for MIUI -------------
#  If you don't need MIUI you can comment out the above block [Building for MIUI]


cd anykernel 

ZIP_FILENAME=Kernel_MIUI_${TARGET_DEVICE}_${KSU_ZIP_STR}_$(date +'%Y%m%d_%H%M%S')_anykernel3.zip

zip -r9 $ZIP_FILENAME ./* -x .git .gitignore out/ ./*.zip

mv $ZIP_FILENAME ../

cd ..

echo "Done. The flashable zip is: [./$ZIP_FILENAME]"
>>>>>>> 7fc44a779600 (Add scripts)
