name: 构建内核
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: '目标设备 (Target Device)'
        required: true
        default: 'umi'
        type: choice
        options:
          - 'umi'
          - 'cmi'
          - 'cas'
          - 'thyme'
          - 'munch'
          - 'dagu'
          - 'elish'
          - 'enuma'
          - 'alioth'
          - 'apollo'
          - 'lmi'
          - 'psyche'
          - 'pipa'

      compiled_system:
        description: '适用系统 (Compiled System)'
        required: true
        type: choice
        default: 'MIUI'
        options:
          - 'MIUI'
          - 'AOSP'
        
      kernelsu_variant:
        description: 'KernelSU 变体 (KernelSU Variant)'
        required: true
        type: choice
        default: 'SukiSU-Ultra'
        options:
          - 'SukiSU-Ultra'
          - 'RKSU'
          - 'KernelSU'
          - 'None'

      kpm_enable:
        description: '是否启用 KPM 支持? (KPM Support) [仅支持SukiSU-Ultra]'
        required: true
        type: choice
        default: 'enable'
        options:
          - 'enable'
          - 'disable'

      kernel_version:
        description: '自定义内核版本号 (Kernel Version)'
        required: false
        type: string
        default: ''

      build_type:
        description: '内核构建类型 (Build Type)'
        required: true
        type: choice
        default: 'Release'
        options:
          - 'Release'
          - 'Dev'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      WORKDIR: "${{ github.workspace }}"
      KERNEL_SOURCE: "${{ github.workspace }}/kernel_source"
      TOOLCHAIN_DIR: "${{ github.workspace }}/toolchain"

    steps:
      - name: 📢 构建信息
        run: |
          echo "设备: ${{ github.event.inputs.target_device }} | 系统: ${{ github.event.inputs.compiled_system }}"
          echo "KernelSU变体: ${{ github.event.inputs.kernelsu_variant }} | KPM: ${{ github.event.inputs.kpm_enable }}"
          echo "构建类型: ${{ github.event.inputs.build_type }}"

      - name: 🚀 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: 📦 安装依赖
        run: |
          echo "正在安装构建依赖..."
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y \
            bc binutils-dev bison build-essential ca-certificates ccache cmake curl file flex \
            git libelf-dev libssl-dev make ninja-build python3-dev texinfo u-boot-tools xz-utils \
            zlib1g-dev libncurses-dev wget zip cpio python3 python3-pip tree gcc clang lld llvm
          echo "✅ 依赖安装完成"
          
      - name: ⚙️ 配置 ccache
        run: |
          mkdir -p ~/.cache
          ccache --version
          ccache --max-size=4G
          ccache --set-config=compression=true
          ccache --zero-stats
          echo "CCACHE_DIR=$HOME/.cache" >> $GITHUB_ENV
          
      - name: 📥 恢复 ccache 缓存
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: ccache-${{ github.event.inputs.target_device }}-${{ github.event.inputs.compiled_system }}-${{ hashFiles('**/Makefile') }}
          restore-keys: |
            ccache-${{ github.event.inputs.target_device }}-${{ github.event.inputs.compiled_system }}-
            ccache-${{ github.event.inputs.target_device }}-
            ccache-
            
      - name: 📥 克隆内核源码
        run: |
          echo "正在克隆内核源码..."
          git clone https://github.com/yspbwx2010/kernel_xiaomi_sm8250_mod.git --depth=1 $KERNEL_SOURCE
          echo "✅ 内核源码克隆完成"

      - name: 📥 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: ${{ env.TOOLCHAIN_DIR }}
          key: toolchain-clang-r547379-gcc-${{ hashFiles('**/*.sh') }}
          restore-keys: |
            toolchain-clang-r547379-gcc-
            toolchain-
            
      - name: 📥 下载编译工具链
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          echo "正在下载编译工具链..."
          # 创建工具链目录
          mkdir -p "$TOOLCHAIN_DIR/clang"
          mkdir -p "$TOOLCHAIN_DIR/gcc/gcc64"
          mkdir -p "$TOOLCHAIN_DIR/gcc/gcc32"
          
          # 下载 Clang
          echo "正在下载 Clang..."
          cd "$TOOLCHAIN_DIR/clang"
          wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang-r547379.tar.gz
          tar -xzf clang-r547379.tar.gz
          rm clang-r547379.tar.gz
          
          # 下载 GCC
          echo "正在下载 GCC工具链..."
          cd "$TOOLCHAIN_DIR/gcc/gcc64"
          git init
          git remote add origin https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git
          git fetch --depth 1 origin
          git checkout FETCH_HEAD
          
          cd "$TOOLCHAIN_DIR/gcc/gcc32"
          git init
          git remote add origin https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git
          git fetch --depth 1 origin
          git checkout FETCH_HEAD
          
          echo "✅ 工具链下载完成"

      - name: ⚙️ 配置 KernelSU
        run: |
          cd "$KERNEL_SOURCE"
          
          KSU_VARIANT="${{ github.event.inputs.kernelsu_variant }}"
          
          echo "⚙️ 配置 KernelSU 变体: $KSU_VARIANT"
          
          if [ "$KSU_VARIANT" == "SukiSU-Ultra" ]; then
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-dev/kernel/setup.sh" | bash -s susfs-dev
          elif [ "$KSU_VARIANT" == "RKSU" ]; then
            curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/susfs-v1.5.5/kernel/setup.sh" | bash -s susfs-v1.5.5
          elif [ "$KSU_VARIANT" == "KernelSU" ]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
          else
            echo "KernelSU 已禁用"
          fi
          
          echo "✅ KernelSU 配置完成"
          
      - name: 🔨 构建内核
        run: |
          cd "$KERNEL_SOURCE"
          
          # 设置环境变量
          export PATH="$TOOLCHAIN_DIR/clang/bin:$PATH"
          
          # 定义构建参数
          MAKE_ARGS="ARCH=arm64 SUBARCH=arm64 LLVM=1 LLVM_IAS=1 \
            CROSS_COMPILE=$TOOLCHAIN_DIR/gcc/gcc64/bin/aarch64-linux-android- \
            CROSS_COMPILE_COMPAT=$TOOLCHAIN_DIR/gcc/gcc32/bin/arm-linux-androideabi- \
            CROSS_COMPILE_ARM32=$TOOLCHAIN_DIR/gcc/gcc32/bin/arm-linux-androideabi- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            LD=ld.lld HOSTLD=ld.lld \
            KCFLAGS=-Wno-error \
            O=out"
          
          # 获取参数
          DEVICE="${{ github.event.inputs.target_device }}"
          SYSTEM="${{ github.event.inputs.compiled_system }}"
          KSU="${{ github.event.inputs.kernelsu_variant }}"
          KPM="${{ github.event.inputs.kpm_enable }}"
          VERSION="${{ github.event.inputs.kernel_version }}"
          
          # 生成设备配置
          echo "🔧 正在生成 ${DEVICE} 的配置..."
          make $MAKE_ARGS -j$(nproc --all) ${DEVICE}_defconfig
          
          # 开启一些附加优化配置
          echo "🔧 应用基本优化配置..."
          scripts/config --file out/.config \
            -e KALLSYMS \
            -e KALLSYMS_ALL \
            -e KPROBES \
            -e HAVE_KPROBES \
            -e KPROBE_EVENTS \
            -e TMPFS_XATTR=y \
            -e TMPFS_POSIX_ACL \
            -e IP_NF_TARGET_TTL \
            -e IP6_NF_TARGET_HL \
            -e IP6_NF_MATCH_HL \
            -e UCLAMP_TASK \
            -e TCP_CONG_ADVANCED \
            -e TCP_CONG_BIC \
            -e TCP_CONG_CUBIC \
            -e TCP_CONG_WESTWOOD \
            -e TCP_CONG_HTCP \
            -e TCP_CONG_HSTCP \
            -e TCP_CONG_HYBLA \
            -e TCP_CONG_VEGAS \
            -e TCP_CONG_NV \
            -e TCP_CONG_SCALABLE \
            -e TCP_CONG_LP \
            -e TCP_CONG_VENO \
            -e TCP_CONG_YEAH \
            -e TCP_CONG_ILLINOIS \
            -e TCP_CONG_DCTCP \
            -e TCP_CONG_CDG \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            -e NET_SCHED \
            -e NET_SCH_HTB \
            -e NET_SCH_HFSC \
            -e NET_SCH_PRIO \
            -e NET_SCH_MULTIQ \
            -e NET_SCH_RED \
            -e NET_SCH_SFB \
            -e NET_SCH_SFQ \
            -e NET_SCH_TEQL \
            -e NET_SCH_TBF \
            -e NET_SCH_CBS \
            -e NET_SCH_ETF \
            -e NET_SCH_TAPRIO \
            -e NET_SCH_GRED \
            -e NET_SCH_NETEM \
            -e NET_SCH_DRR \
            -e NET_SCH_MQPRIO \
            -e NET_SCH_SKBPRIO \
            -e NET_SCH_CHOKE \
            -e NET_SCH_QFQ \
            -e NET_SCH_CODEL \
            -e NET_SCH_FQ_CODEL \
            -e NET_SCH_CAKE \
            -e NET_SCH_FQ \
            -e NET_SCH_HHF \
            -e NET_SCH_PIE \
            -e NET_SCH_FQ_PIE \
            -e NET_SCH_INGRESS \
            -e NET_SCH_PLUG \
            -e NET_SCH_ETS \
            -e NET_SCH_FIFO \
            -e NET_SCH_DEFAULT \
            -e DEFAULT_FQ \
            -e MQ_IOSCHED_DEADLINE \
            -e MQ_IOSCHED_KYBER \
            -e IOSCHED_BFQ \
            -e BFQ_GROUP_IOSCHED \
            -e ENERGY_MODEL \
            -e CPU_IDLE \
            -e CPU_IDLE_GOV_MENU \
            -e CPU_IDLE_GOV_TEO \
            -e ARM_PSCI_CPUIDLE \
            -e CPU_FREQ \
            -e CPU_FREQ_STAT \
            -e CPU_FREQ_TIMES \
            -e CPU_FREQ_GOV_POWERSAVE \
            -e CPU_FREQ_GOV_CONSERVATIVE \
            -e CPU_FREQ_GOV_USERSPACE \
            -e CPU_FREQ_GOV_ONDEMAND \
            -e ZRAM \
            -e ZSMALLOC \
            -e ZRAM_WRITEBACK \
            -e CRYPTO_LZ4 \
            -e CRYPTO_LZ4HC \
            -e CRYPTO_LZ4K \
            -e CRYPTO_LZ4KD \
            -e CRYPTO_ZSTD \
            -e CRYPTO_842 \
            -e CRYPTO_LZO \
            -e CRYPTO_DEFLATE \
            --set-str ZRAM_DEF_COMP lz4kd \
            -e ZRAM_DEF_COMP_LZ4KD \
            -e SWAP \
            -e ZSWAP \
            -e ANDROID_SIMPLE_LMK
            
          # 根据系统类型修改配置
          if [ "$SYSTEM" == "MIUI" ]; then
              echo "🔧 应用 MIUI 特定配置..."
              scripts/config --file out/.config \
                  --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd \
                  -e PERF_CRITICAL_RT_TASK \
                  -e SF_BINDER \
                  -e OVERLAY_FS \
                  -d DEBUG_FS \
                  -e MIGT \
                  -e MIGT_ENERGY_MODEL \
                  -e MIHW \
                  -e PACKAGE_RUNTIME_INFO \
                  -e BINDER_OPT \
                  -e KPERFEVENTS \
                  -e MILLET \
                  -e PERF_HUMANTASK \
                  -d LTO_CLANG \
                  -d LOCALVERSION_AUTO \
                  -e SF_BINDER \
                  -e XIAOMI_MIUI \
                  -d MI_MEMORY_SYSFS \
                  -e TASK_DELAY_ACCT \
                  -e MIUI_ZRAM_MEMORY_TRACKING \
                  -d CONFIG_MODULE_SIG_SHA512 \
                  -d CONFIG_MODULE_SIG_HASH \
                  -e MI_FRAGMENTION \
                  -e PERF_HELPER \
                  -e BOOTUP_RECLAIM \
                  -e MI_RECLAIM \
                  -e RTMM
          fi
            
          # 根据 KernelSU 变体修改配置
          if [ "$KSU" == "SukiSU-Ultra" ] || [ "$KSU" == "RKSU" ]; then
              echo "🔧 应用 SukiSU-Ultra & RKSU 配置..."
              scripts/config --file out/.config \
                  -e KSU \
                  -e KSU_MANUAL_HOOK \
                  -e KSU_SUSFS \
                  -e KSU_SUSFS_HAS_MAGIC_MOUNT \
                  -e KSU_SUSFS_SUS_PATH \
                  -e KSU_SUSFS_SUS_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
                  -e KSU_SUSFS_SUS_KSTAT \
                  -d KSU_SUSFS_SUS_OVERLAYFS \
                  -e KSU_SUSFS_TRY_UMOUNT \
                  -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
                  -e KSU_SUSFS_SPOOF_UNAME \
                  -e KSU_SUSFS_ENABLE_LOG \
                  -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
                  -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
                  -e KSU_SUSFS_OPEN_REDIRECT \
                  -d KSU_SUSFS_SUS_SU
          elif [ "$KSU" == "KernelSU" ]; then
              echo "🔧 应用 KernelSU 配置..."
              scripts/config --file out/.config \
                  -e KSU
          fi
            
          # 判断KPM是否启用并开启相关配置
          if [ "$KSU" == "SukiSU-Ultra" ] && [ "$KPM" == "enable" ]; then
              echo "🔧 开启 KPM 配置..."
              scripts/config --file out/.config \
                  -e KPM
          fi
            
          # 修改内核版本号
          if [ ! -z "$VERSION" ]; then
              echo "🔧 设置自定义内核版本: $VERSION"
              sed -i "s/-dirty/-$VERSION/g" scripts/setlocalversion
          else
              echo "🔧 使用默认版本后缀: -Yun"
              sed -i "s/-dirty/-Yun/g" scripts/setlocalversion
          fi
            
          # 开始构建
          echo "🚀 开始构建内核..."
          make $MAKE_ARGS -j$(nproc --all) 2>&1 | tee build.log
            
          # 验证构建结果
          if [ -f "$KERNEL_SOURCE/out/arch/arm64/boot/Image" ]; then
              echo "✅ 内核构建成功"
          else
              echo "❌ 内核构建失败"
              echo "错误日志:"
              tail -n 100 build.log
              exit 1
          fi
            
          # 显示 ccache 统计信息
          echo "📊 CCache 统计信息:"
          ccache --show-stats

      - name: 🛠️ KPM 修补 Image 文件
        run: |
          KSU_VARIANT="${{ github.event.inputs.kernelsu_variant }}"
          KPM_ENABLE="${{ github.event.inputs.kpm_enable }}"
          
          if [ "$KSU_VARIANT" == "SukiSU-Ultra" ] && [ "$KPM_ENABLE" == "enable" ]; then
            echo "🛠️ 正在修补 Image 文件..."
            cd "$KERNEL_SOURCE/out/arch/arm64/boot"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
            chmod 777 patch
            ./patch
            if [ $? -eq 0 ]; then
              rm -f Image
              mv oImage Image
              echo "✅ Image 文件修补完成"
            else
              echo "❌ KPM 修补失败，使用原始 Image"
            fi
          else 
            echo "ℹ️ KPM 未启用或 KernelSU 变体不支持 KPM"
          fi

      - name: 📝 设置版本变量
        run: |
          cd "$KERNEL_SOURCE"
          
          # 获取 Git Commit 哈希值
          GIT_COMMIT_SHORT=$(git rev-parse --short=6 HEAD)
          echo "GIT_COMMIT_ID=$GIT_COMMIT_SHORT" >> $GITHUB_ENV
          
          # 获取日期
          BUILD_DATE=$(date +%Y%m%d)
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: 📦 打包内核到 AnyKernel3
        run: |
          # 定义变量
          DEVICE="${{ github.event.inputs.target_device }}"
          SYSTEM="${{ github.event.inputs.compiled_system }}"
          KSU="${{ github.event.inputs.kernelsu_variant }}"
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
          BUILD_ID="${{ env.GIT_COMMIT_ID }}"
          BUILD_DATE="${{ env.BUILD_DATE }}"
          ZIP_NAME="${DEVICE}_${KSU}_${SYSTEM}_${BUILD_DATE}_${BUILD_ID}_${BUILD_TYPE}.zip"
          
          echo "📦 创建 AnyKernel3 刷机包"
          
          # 创建目录并克隆 AnyKernel3
          mkdir -p "$WORKDIR/ak3_out"
          cd "$WORKDIR/ak3_out"
          git clone https://github.com/osm0sis/AnyKernel3.git --depth=1
          cd AnyKernel3
          
          # 删除不需要的文件
          rm -rf .git .github
          
          # 复制内核镜像
          cp "$KERNEL_SOURCE/out/arch/arm64/boot/Image" ./
          
          # 打包
          echo "📦 正在创建刷机包: $ZIP_NAME"
          zip -r "$ZIP_NAME" .
          
          if [ -f "$ZIP_NAME" ]; then
            echo "✅ 刷机包创建成功: $ZIP_NAME"
            ls -lh "$ZIP_NAME"
          else
            echo "❌ 刷机包创建失败"
            exit 1
          fi

      - name: 📤 上传编译结果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ env.BUILD_DATE }}_${{ env.GIT_COMMIT_ID }}_${{ github.event.inputs.build_type }}
          path: |
            ${{ github.workspace }}/ak3_out/*.zip
            ${{ env.KERNEL_SOURCE }}/out/arch/arm64/boot/Image
      
      - name: 📤 发布到 Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/ak3_out/*.zip
            ${{ env.KERNEL_SOURCE }}/out/arch/arm64/boot/Image
          name: Kernel_${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ env.BUILD_DATE }}_${{ env.GIT_COMMIT_ID }}_${{ github.event.inputs.build_type }}
          tag_name: Kernel_${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ env.BUILD_DATE }}_${{ env.GIT_COMMIT_ID }}
          body: |
            ## 📱 内核构建信息
            
            ### 🌐 英文 | English
            - **Target Device:** ${{ github.event.inputs.target_device }}
            - **Compiled System:** ${{ github.event.inputs.compiled_system }}
            - **KernelSU Variant:** ${{ github.event.inputs.kernelsu_variant }}
            - **KPM Support:** ${{ github.event.inputs.kpm_enable }}
            - **Build Type:** ${{ github.event.inputs.build_type }}
            - **Build Date:** ${{ env.BUILD_DATE }}
            - **Commit ID:** ${{ env.GIT_COMMIT_ID }}
            
            ### 🇨🇳 中文 | Chinese
            - **目标机型:** ${{ github.event.inputs.target_device }}
            - **适用系统:** ${{ github.event.inputs.compiled_system }}
            - **KernelSU变体:** ${{ github.event.inputs.kernelsu_variant }}
            - **KPM支持:** ${{ github.event.inputs.kpm_enable }}
            - **构建类型:** ${{ github.event.inputs.build_type }}
            - **构建日期:** ${{ env.BUILD_DATE }}
            - **提交ID:** ${{ env.GIT_COMMIT_ID }}
            
            ### 📋 安装说明 | Installation Guide
            1. 下载刷机包
            2. 进入Recovery模式
            3. 通过Recovery刷入刷机包
            4. 重启设备
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
