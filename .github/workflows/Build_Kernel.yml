name: Build Kernel
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: '目标设备 (Target Device) [All暂不可用]'
        required: true
        default: 'umi'
        type: choice
        options: ['umi', 'cmi', 'cas', 'thyme', 'munch', 'dagu', 'elish', 'enuma', 'alioth', 'apollo', 'lmi', 'psyche', 'pipa', 'All']

      compiled_system:
        description: '适用系统 (Compiled System) [All暂不可用]'
        required: true
        type: choice
        default: 'MIUI'
        options: ['MIUI', 'AOSP', 'All']
        
      kernelsu_variant:
        description: 'KernelSU 变体 (KernelSU Variant)'
        required: true
        type: choice
        default: 'SukiSU-Ultra'
        options: ['SukiSU-Ultra', 'RKSU', 'KernelSU', 'None']

      build_type:
        description: '内核构建类型 (Build Type)'
        required: true
        type: choice
        default: 'Release'
        options: ['Release', 'Dev']

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      KERNEL_ROOT: "/home/runner/work/kernel_xiaomi_sm8250_mod/kernel_xiaomi_sm8250_mod"
      KERNEL_IMAGE: "/home/runner/work/kernel_xiaomi_sm8250_mod/kernel_xiaomi_sm8250_mod/kernel_platform/out/arch/arm64/boot/Image"
      KERNEL_DTBO: "/home/runner/work/kernel_xiaomi_sm8250_mod/kernel_xiaomi_sm8250_mod/kernel_platform/out/arch/arm64/boot/dtbo.img"
      KERNEL_DTB: "/home/runner/work/kernel_xiaomi_sm8250_mod/kernel_xiaomi_sm8250_mod/kernel_platform/out/arch/arm64/boot/dtb.img"
    steps:
      - name: 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          
      - name: 克隆内核源码
        id: clone
        continue-on-error: true
        run: |
          git clone https://github.com/yspbwx2010/kernel_xiaomi_sm8250_mod.git --depth=1 kernel_platform
          
      - name: 检查源码克隆状态
        if: steps.clone.outcome == 'failure'
        run: |
          echo "❌ 内核源码克隆失败，请检查仓库地址是否正确"
          exit 1
          
      - name: 安装依赖
        run: |
          sudo apt update
          sudo apt install -y bc binutils-dev bison build-essential ccache clang cmake curl file flex gcc git libelf-dev libncurses-dev libssl-dev lld llvm make ninja-build python3 python3-dev python3-pip texinfo tree u-boot-tools wget xz-utils zip zlib1g-dev

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/ccache
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          
      - name: 从缓存恢复 ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ github.event.inputs.target_device }}-${{ github.event.inputs.compiled_system }}
          restore-keys: ccache-${{ github.event.inputs.target_device }}-
            
      - name: 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: ${{ env.KERNEL_ROOT }}/kernel_platform/toolchain
          key: toolchain-clang-r547379-gcc
            
      - name: 下载工具链
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          cd "$KERNEL_ROOT/kernel_platform"
          mkdir -p toolchain/clang
          cd toolchain/clang
          wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang-r547379.tar.gz || { echo "❌ 工具链下载失败"; exit 1; }
          tar -xf clang-r547379.tar.gz || { echo "❌ 工具链解压失败"; exit 1; }
          rm clang-r547379.tar.gz
          git submodule update --init --remote toolchain/gcc/gcc64 || { echo "❌ GCC64 工具链同步失败"; exit 1; }
          git submodule update --init --remote toolchain/gcc/gcc32 || { echo "❌ GCC32 工具链同步失败"; exit 1; }

      - name: 配置 KernelSU
        run: |
          cd "$KERNEL_ROOT/kernel_platform"
          KSU_VARIANT="${{ github.event.inputs.kernelsu_variant }}"
          
          case "$KSU_VARIANT" in
            "SukiSU-Ultra")
              curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-dev/kernel/setup.sh" | bash -s susfs-dev || { echo "❌ SukiSU-Ultra 配置失败"; exit 1; }
              ;;
            "RKSU")
              curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/susfs-v1.5.5/kernel/setup.sh" | bash -s susfs-v1.5.5 || { echo "❌ RKSU 配置失败"; exit 1; }
              ;;
            "KernelSU")
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5 || { echo "❌ KernelSU 配置失败"; exit 1; }
              ;;
          esac
          
      - name: 构建内核
        run: |
          cd "$KERNEL_ROOT/kernel_platform"
          
          DEVICE="${{ github.event.inputs.target_device }}"
          SYSTEM="${{ github.event.inputs.compiled_system }}"
          KSU="${{ github.event.inputs.kernelsu_variant }}"
          
          [[ "$DEVICE" == "All" || "$SYSTEM" == "All" ]] && { echo "❌ 不支持 All 选项"; exit 1; }
          
          export CCACHE=1
          export PATH="/usr/bin:$PATH"
          
          MAKE_ARGS="ARCH=arm64 SUBARCH=arm64 LLVM=1 LLVM_IAS=1 \
            CROSS_COMPILE=./toolchain/gcc/gcc64/aarch64-linux-android- \
            CROSS_COMPILE_COMPAT=./toolchain/gcc/gcc32/arm-linux-androideabi- \
            CROSS_COMPILE_ARM32=./toolchain/gcc/gcc32/arm-linux-androideabi- \
            CLANG_TRIPLE=aarch64-linux-gnu- CC=clang CXX=clang++ \
            HOSTCC=clang HOSTCXX=clang++ LD=ld.lld HOSTLD=ld.lld \
            KCFLAGS=-Wno-error O=out"

          echo "📝 生成设备配置..."
          make $MAKE_ARGS -j$(nproc --all) ${DEVICE}_defconfig || { echo "❌ 设备配置生成失败"; exit 1; }

          if [ "$SYSTEM" == "MIUI" ]; then
            echo "📝 应用 MIUI 配置..."
            scripts/config --file out/.config \
              --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd \
              -e PERF_CRITICAL_RT_TASK -e SF_BINDER -e OVERLAY_FS -d DEBUG_FS \
              -e MIGT -e MIGT_ENERGY_MODEL -e MIHW -e PACKAGE_RUNTIME_INFO \
              -e BINDER_OPT -e KPERFEVENTS -e MILLET -e PERF_HUMANTASK \
              -d LTO_CLANG -d LOCALVERSION_AUTO -e SF_BINDER -e XIAOMI_MIUI \
              -d MI_MEMORY_SYSFS -e TASK_DELAY_ACCT -e MIUI_ZRAM_MEMORY_TRACKING \
              -d CONFIG_MODULE_SIG_SHA512 -d CONFIG_MODULE_SIG_HASH \
              -e MI_FRAGMENTION -e PERF_HELPER -e BOOTUP_RECLAIM \
              -e MI_RECLAIM -e RTMM || { echo "❌ MIUI 配置应用失败"; exit 1; }
          fi

          if [ "$KSU" == "SukiSU-Ultra" ] || [ "$KSU" == "RKSU" ]; then
            echo "📝 应用 KernelSU 配置..."
            scripts/config --file out/.config \
              -e KSU -e KSU_SUSFS -e KSU_SUSFS_HAS_MAGIC_MOUNT \
              -e KSU_SUSFS_SUS_PATH -e KSU_SUSFS_SUS_MOUNT \
              -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
              -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT -e KSU_SUSFS_SUS_KSTAT \
              -d KSU_SUSFS_SUS_OVERLAYFS -e KSU_SUSFS_TRY_UMOUNT \
              -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
              -e KSU_SUSFS_SPOOF_UNAME -e KSU_SUSFS_ENABLE_LOG \
              -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
              -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
              -e KSU_SUSFS_OPEN_REDIRECT -d KSU_SUSFS_SUS_SU || { echo "❌ KernelSU 配置应用失败"; exit 1; }
            [ "$KSU" == "SukiSU-Ultra" ] && scripts/config --file out/.config -e KPM
          elif [ "$KSU" == "KernelSU" ]; then
            scripts/config --file out/.config -e KSU || { echo "❌ KernelSU 配置应用失败"; exit 1; }
          fi

          echo "🔨 开始构建内核..."
          make $MAKE_ARGS -j$(nproc --all) || { echo "❌ 内核构建失败"; exit 1; }
          
          # 检查必要文件
          for file in "$KERNEL_IMAGE" "$KERNEL_DTBO" "$KERNEL_DTB"; do
            if [ ! -f "$file" ]; then
              echo "❌ 找不到文件: $file"
              exit 1
            fi
          done
          
          echo "✅ 内核构建成功"
          echo "📊 构建统计信息:"
          ccache --show-stats

      - name: KPM 修补
        if: github.event.inputs.kernelsu_variant == 'SukiSU-Ultra'
        run: |
          cd "$KERNEL_ROOT/kernel_platform/out/arch/arm64/boot"
          echo "📝 下载 KPM 修补工具..."
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch || { echo "❌ KPM 修补工具下载失败"; exit 1; }
          chmod +x patch
          echo "🔧 执行 KPM 修补..."
          ./patch || { echo "❌ KPM 修补失败"; exit 1; }
          mv oImage Image || { echo "❌ 修补后的镜像重命名失败"; exit 1; }
          echo "✅ KPM 修补完成"

      - name: 打包 AnyKernel3
        run: |
          DEVICE="${{ github.event.inputs.target_device }}"
          KSU="${{ github.event.inputs.kernelsu_variant }}"
          SYSTEM="${{ github.event.inputs.compiled_system }}"
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
          ZIP_NAME="${DEVICE}_${KSU}_${SYSTEM}_${BUILD_TYPE}_${{ github.run_id }}.zip"
          
          cd "$KERNEL_ROOT"
          echo "📥 克隆 AnyKernel3..."
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git || { echo "❌ AnyKernel3 克隆失败"; exit 1; }
          
          echo "📝 复制内核文件..."
          cp "$KERNEL_IMAGE" AnyKernel3/ || { echo "❌ Image 复制失败"; exit 1; }
          cp "$KERNEL_DTBO" AnyKernel3/ || { echo "❌ DTBO 复制失败"; exit 1; }
          cp "$KERNEL_DTB" AnyKernel3/ || { echo "❌ DTB 复制失败"; exit 1; }
          
          cd AnyKernel3
          echo "📦 创建刷机包..."
          zip -r9 "../$ZIP_NAME" * || { echo "❌ 刷机包创建失败"; exit 1; }
          echo "✅ 刷机包创建成功: $ZIP_NAME"

      - name: 上传结果
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ github.event.inputs.build_type }}
          path: |
            ${{ env.KERNEL_ROOT }}/*.zip
            ${{ env.KERNEL_IMAGE }}
            ${{ env.KERNEL_DTBO }}
            ${{ env.KERNEL_DTB }}
          if-no-files-found: error
      
      - name: 发布 Release
        if: success()
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.KERNEL_ROOT }}/*.zip
            ${{ env.KERNEL_IMAGE }}
            ${{ env.KERNEL_DTBO }}
            ${{ env.KERNEL_DTB }}
          name: Kernel_${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ github.run_id }}
          tag_name: Kernel_${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ github.run_id }}
          body: |
            ----------------English----------------
            Target Device: ${{ github.event.inputs.target_device }}
            Compiled System: ${{ github.event.inputs.compiled_system }}
            KernelSU Variant: ${{ github.event.inputs.kernelsu_variant }}
            Build Type: ${{ github.event.inputs.build_type }}
            ------------------中文------------------
            目标机型: ${{ github.event.inputs.target_device }}
            适用系统: ${{ github.event.inputs.compiled_system }}
            KernelSU变体: ${{ github.event.inputs.kernelsu_variant }}
            构建类型: ${{ github.event.inputs.build_type }}
            ----------------------------------------
            
            📝 构建日志请查看 Actions 页面

      - name: 清理工作区
        if: always()
        run: |
          rm -rf "$KERNEL_ROOT"
          echo "🧹 工作区清理完成"
